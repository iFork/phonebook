{"version":3,"sources":["services/person.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPersonObj","post","id","put","delete","Notification","notification","message","type","className","console","log","Notifications","notifications","map","n","key","PersonForm","newName","newNumber","setNewName","setNewNumber","addPerson","value","onChange","event","target","onClick","Filter","filterName","setFilterName","e","Person","props","person","handleDelete","name","number","Persons","persons","App","useState","setPersons","setNotifications","lastNotificationId","useRef","addNotification","newNotificationId","current","newNotification","prev","concat","setTimeout","filter","useEffect","personService","initialPersons","personsToShow","toLowerCase","indexOf","preventDefault","idOfDuplicate","idOf","returnedPerson","catch","err","toJSON","error","window","confirm","p","status","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8103c7c0.chunk.js","sourcesContent":["import axios from 'axios';\n\n// const baseUrl = \"http://localhost:3001/api/persons\";\n// const baseUrl = \"https://ancient-lowlands-07089.herokuapp.com/api/persons\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n                .then(response => response.data);\n}\n\nconst create = (newPersonObj) => {\n    return axios.post(baseUrl, newPersonObj)\n                .then(response => response.data);\n}\n\nconst update = (id, newPersonObj) => {\n    //NOTE: when confusing `post` for `put`, we get '404 Not found' error. \n    return axios.put(`${baseUrl}/${id}`, newPersonObj)\n                .then(response => response.data);\n}\n\nconst deletePerson = (id) => {\n    return axios.delete(`${baseUrl}/${id}`);\n}\nexport default {getAll, create, update, deletePerson};\n","import React, { useState, useEffect, useRef } from 'react';\nimport personService from './services/person';\n\nconst Notification = ({notification}) => {\n    const {message, type} = notification;\n    if(!message) {\n        return null;\n    }\n    switch (type) {\n        case 'success':\n            return (\n                <div className=\"notification success\">\n                    {message}\n                </div>\n            );\n        case 'error':\n            return (\n                <div className=\"notification error\">\n                    {message}\n                </div>\n            );\n        default:\n            console.log(\"Unknown notification type\");\n            return (\n                <div className=\"notification\">\n                    {message}\n                </div>\n            );\n    }\n}\n\nconst Notifications = ({notifications}) => {\n    return (\n        <div>\n            { notifications.map(n => <Notification \n                                        key={n.id} \n                                        notification={n} />) }\n        </div>\n    );\n}\n\nconst PersonForm = ({newName, newNumber, setNewName, setNewNumber, \n                     addPerson }) => {\n    return (\n        <form>\n            <div>\n                Name: <input type=\"text\" value={newName} \n                    onChange={event => \n                            setNewName(event.target.value)} />\n            </div>\n            <div>\n                Number: <input type=\"tel\" value={newNumber} \n                    onChange={event=> \n                            setNewNumber(event.target.value)} />\n            </div>\n            <div>\n                <button type=\"submit\" onClick={addPerson} >\n                    Add\n                </button>\n            </div>\n\n        </form>\n    );\n}\n\nconst Filter = ({filterName, setFilterName}) => {\n    return (\n        <div>\n            Filter by name: <input type=\"text\" value={filterName} \n                onChange={(e) => setFilterName(e.target.value)} />\n        </div>\n    );\n}\n\nconst Person = (props) => {\n    // console.log(\"Person: props:\", props);\n    const { person, handleDelete } = props;\n    return (\n        <div>\n            {person.name} {person.number} \n            <button type=\"button\" className=\"deleteButton\"\n                onClick={handleDelete}>delete</button>\n        </div>\n    );\n}\n\nconst Persons = (props) => {\n    // console.log(\"Persons: props:\", props);\n    const { persons, handleDelete } = props;\n    return (\n        <div>\n            {persons.map(person => \n                <Person \n                    key={person.id} \n                    person={person}\n                    handleDelete={() => {\n                        //NOTE: 'event' argument is optional\n                        // console.log(\"handleDelete called w/ event\", event.target);\n                        handleDelete(person.id, person.name)\n                    }}\n                />)}\n        </div>\n    );\n}\n\nconst idOf = (name, persons) => {\n    for (const person of persons) {\n        if (person.name === name) {\n            return person.id;\n        }\n    }\n    return -1;\n}\n\n\nfunction App() {\n    const [persons, setPersons] = useState([]);\n    const [newName, setNewName] = useState(\"\");\n    const [newNumber, setNewNumber] = useState(\"\");\n    const [filterName, setFilterName] = useState(\"\");\n    const [notifications, setNotifications] = useState([]);\n\n    //Note: useRef() a mutable object which persists over renders and\n    //does not cause re-render.\n    const lastNotificationId = useRef(0);\n\n    const addNotification = (message, type) => {\n        const newNotificationId = ++lastNotificationId.current; \n        const newNotification = {\n            id: newNotificationId,\n            message, \n            type\n        };\n        console.log(\"adding notification\", type, newNotificationId, message);\n        //NOTE: use callback in setState() to avoid stale state being captured\n        //when previous state is needed for next state calculation.\n        // setNotifications(notifications.concat(newNotification))\n        setNotifications(prev => prev.concat(newNotification))\n        // console.log(\"notifications appended:\", notifications); \n                                        //'notifications' here is stale\n        setTimeout(() => {\n            console.log(\"filtering as 5s passed... pop id:\", newNotificationId);\n            setNotifications(prev => prev\n                            .filter(n => n.id !== newNotificationId));\n            // console.log(\"new notifications:\", notifications); \n                                        //'notifications' here is stale\n        }, 5000);\n    }\n\n    const fetchHook = () => {\n        personService\n            .getAll()\n            .then(initialPersons => {\n                console.log(\"fulfilled, response is:\", initialPersons);\n                setPersons(initialPersons);\n            })\n    }\n    useEffect(fetchHook, [])\n\n    const personsToShow = filterName \n                          ? persons.filter(person =>\n                            person.name.toLowerCase()\n                              .indexOf(filterName.toLowerCase()) !== -1)\n                          : persons\n\n    const addPerson = (event) => {\n        event.preventDefault(); \n        console.log(\"clicked\", event.target)\n        const idOfDuplicate = idOf(newName, persons);\n        if (idOfDuplicate === -1) {\n            const newPerson = {name: newName, number: newNumber};\n            personService\n                .create(newPerson)\n                .then(returnedPerson => {\n                    console.log(\"creation fulfilled, respose is:\", \n                                    returnedPerson);\n                    setPersons(persons.concat(returnedPerson));\n                    setNewName(\"\");\n                    setNewNumber(\"\");\n                    addNotification(`${newName} is added to contacts.`, \n                                    'success');\n                })\n                //are status(4xx) rejections ?\n                //NOTE: status code that falls out of the range of 2xx is\n                //rejection for axios\n                .catch(err => {\n                    console.log(\"Eror caught:\", err); //> Error: Request failed with status code 400\n                    console.log(\"Eror caught toJSON:\", err.toJSON()); //> \n                    //NOTE: err object's string representation (i.e. its\n                    //toString()) does not reflect its object structure and\n                    //apparently returns its message property.\n                    //To see its object structure use err.toJSON(). In this\n                    //case you will see its `response` prop.\n                    // You can also use a global interceptor and reject only\n                    // the err.response, \n                    // see https://github.com/axios/axios/issues/960#issuecomment-320659373 \n                    addNotification(\n                        `Cannot add to contacts. ${err.response.data.error}`,\n                        'error'\n                    );\n                })\n        }\n        else {\n            if(window.confirm(`${newName} is already added to Phonebook,` \n                    + ` replace old number with a new one?`)) {\n                const newPerson = {name: newName, number: newNumber};\n                personService\n                    .update(idOfDuplicate, newPerson)\n                    .then(returnedPerson => {\n                        console.log(\"update fulfilled, respose is:\", \n                                        returnedPerson);\n                        setPersons(persons.map(p => \n                            p.id === idOfDuplicate \n                            ? returnedPerson : p));\n                        setNewName(\"\");\n                        setNewNumber(\"\");\n                        addNotification(`${newName}'s number is updated`,\n                                        'success');\n                    })\n                    .catch( (err) => { \n                        console.log(\"Update failed\");\n                        if(err.response.status === 404) {\n                            addNotification(\n                                `${newName} was already removed from the server.`,\n                                'error');\n                            setPersons(persons.filter(p => p.id !== idOfDuplicate));\n                        } else {\n                            addNotification(\n                                `Cannot update contact. ${err.response.data.error}`,\n                                'error');\n                        }\n                    });\n            }\n        }\n    }\n\n    const handleDelete = (id, name) => {\n        if (window.confirm(`Delete ${name} from contacts?`)) {\n            personService\n            .deletePerson(id)\n            .then(response => {\n                console.log(\"delete succeeded, response is:\", response);\n                setPersons(persons.filter(p => p.id !== id));\n                addNotification(`${name} is removed from contacts.`,\n                                'success');\n            })\n            .catch( () => { \n                console.log(\"Delete failed\");\n                // setErrorMessage(`${name} was already removed from the server`)\n                //Assuming rejection occurs only n case of double-deletion\n                //filtering stale item\n                setPersons(persons.filter(p => p.id !== id));\n                addNotification(`${name} was already deleted from the server`,\n                                'error');\n            });\n        }\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notifications notifications={notifications}/>\n            <Filter filterName={filterName} setFilterName={setFilterName} />\n            <h3> Add a new person</h3>\n            <PersonForm newName={newName} newNumber={newNumber} addPerson={addPerson}\n                        setNewNumber={setNewNumber} setNewName={setNewName} />\n            <h3>Numbers</h3>\n            <Persons persons={personsToShow} handleDelete={handleDelete}/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root')\n);\n\n"],"sourceRoot":""}